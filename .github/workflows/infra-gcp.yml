# .github/workflows/infra-gcp.yml
name: Infra GCP

on:
  workflow_dispatch:       # dispara manualmente no GitHub UI

env:
  PROJECT_ID: app-chamada-stage
  REGION:     us-west1
  ZONE:       us-west1-a
  BUCKET:     iac-stage-tfstate      # bucket remoto do state
  CLUSTER:    app-chamada-stage      # nome exato do cluster
  NODEPOOL:   primary                # nome do node-pool
  REPO_NAME:  frontend               # Artifact Registry repo

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    # 0Ô∏è‚É£  Checkout
    - name: Checkout repo
      uses: actions/checkout@v4

    # 1Ô∏è‚É£  Autentica√ß√£o no GCP ‚Äì exporta GOOGLE_APPLICATION_CREDENTIALS
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

    # 2Ô∏è‚É£  gcloud + kubectl + gsutil
    - name: Setup gcloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    # 3Ô∏è‚É£  Cria (ou verifica) o bucket remoto do state
    - name: Create state bucket (idempotent)
      run: |
        if gsutil ls -b "gs://${BUCKET}" >/dev/null 2>&1; then
          echo "‚úÖ  Bucket gs://${BUCKET} j√° existe"
        else
          echo "ü™£  Criando bucket gs://${BUCKET}‚Ä¶"
          gsutil mb -l "${REGION}" "gs://${BUCKET}"
          gsutil versioning set on "gs://${BUCKET}"
        fi

    # 4Ô∏è‚É£  Instala Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # 5Ô∏è‚É£  terraform init (backend remoto)
    - name: Terraform Init
      working-directory: gcp
      run: |
        terraform init -input=false -upgrade \
          -backend-config="bucket=${BUCKET}" \
          -backend-config="prefix=terraform"

    # 6Ô∏è‚É£  Validate & Plan
    - name: Terraform Validate
      working-directory: gcp
      run: terraform validate -no-color

    - name: Terraform Plan
      working-directory: gcp
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS_JSON }}
      run: terraform plan -no-color

    # 7Ô∏è‚É£  Importa o Artifact Registry caso j√° exista
    - name: Import existing Artifact Registry (if any)
      working-directory: gcp
      env:
        PROJECT_ID: ${{ env.PROJECT_ID }}
        REGION:     ${{ env.REGION }}
      run: |
        set -e
        if terraform state list 2>/dev/null | grep -q \
             '^google_artifact_registry_repository.frontend$'; then
          echo "‚úÖ  Repo j√° no state"
        elif gcloud artifacts repositories describe "${REPO_NAME}" \
                 --location "${REGION}" --project "${PROJECT_ID}" --quiet \
                 >/dev/null 2>&1; then
          echo "üì¶  Importando repo '${REPO_NAME}' para o state"
          terraform import -input=false -no-color \
            google_artifact_registry_repository.frontend \
            "projects/${PROJECT_ID}/locations/${REGION}/repositories/${REPO_NAME}"
        else
          echo "‚ÑπÔ∏è  Repo ainda n√£o existe ‚Äì ser√° criado no apply"
        fi

    # 8Ô∏è‚É£  Importa o cluster GKE se j√° existir
    - name: Import existing GKE cluster (if any)
      working-directory: gcp
      env:
        PROJECT_ID: ${{ env.PROJECT_ID }}
        ZONE:       ${{ env.ZONE }}
        CLUSTER:    ${{ env.CLUSTER }}
      run: |
        set -e
        if terraform state list 2>/dev/null | grep -q \
             '^google_container_cluster.frontend$'; then
          echo "‚úÖ  Cluster j√° no state"
        elif gcloud container clusters describe "${CLUSTER}" \
                 --zone "${ZONE}" --project "${PROJECT_ID}" --quiet \
                 >/dev/null 2>&1; then
          echo "üì¶  Importando cluster '${CLUSTER}'"
          terraform import -input=false -no-color \
            google_container_cluster.frontend \
            "projects/${PROJECT_ID}/locations/${ZONE}/clusters/${CLUSTER}"
        else
          echo "‚ÑπÔ∏è  Cluster ainda n√£o existe ‚Äì ser√° criado no apply"
        fi

    # 9Ô∏è‚É£  Importa o node-pool ‚Äúprimary‚Äù se j√° existir
    - name: Import existing node-pool (if any)
      working-directory: gcp
      env:
        PROJECT_ID: ${{ env.PROJECT_ID }}
        ZONE:       ${{ env.ZONE }}
        CLUSTER:    ${{ env.CLUSTER }}
        NODEPOOL:   ${{ env.NODEPOOL }}
      run: |
        set -e
        if terraform state list 2>/dev/null | grep -q \
             '^google_container_node_pool.primary$'; then
          echo "‚úÖ  Node-pool j√° no state"
        elif gcloud container node-pools describe "${NODEPOOL}" \
                 --cluster "${CLUSTER}" --zone "${ZONE}" \
                 --project "${PROJECT_ID}" --quiet >/dev/null 2>&1; then
          echo "üì¶  Importando node-pool '${NODEPOOL}'"
          terraform import -input=false -no-color \
            google_container_node_pool.primary \
            "projects/${PROJECT_ID}/locations/${ZONE}/clusters/${CLUSTER}/nodePools/${NODEPOOL}"
        else
          echo "‚ÑπÔ∏è  Node-pool ainda n√£o existe ‚Äì ser√° criado no apply"
        fi

    # üîü  Apply
    - name: Terraform Apply
      working-directory: gcp
      env:
        TF_VAR_gcp_credentials: ${{ secrets.GCP_CREDENTIALS_JSON }}
      run: terraform apply -auto-approve -no-color
